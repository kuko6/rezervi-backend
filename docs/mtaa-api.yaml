openapi: 3.0.0
info:
  version: '1.2.0'
  title: 'MTAA-api'
servers:
  - url: 'localhost:3000'
paths:
  /rooms:
    get:
      summary: 'Returns a list of rooms based on specified arguments'
      security:
        - bearerAuth: [] 
      tags:
        - rooms
      parameters:
        - name: name
          in: query
          description: Name of the room
          schema:
            type: string
            example: "Big conference room"
        - name: num_of_seats_lte
          in: query
          description: The number of seats in the room
          schema:
            type: integer
            format: uint32
            example: 12
        - name: num_of_seats_gte
          in: query
          description: The number of seats in the room
          schema:
            type: integer
            format: uint32
            example: 6
        - name: amenity[]
          in: query
          description: The rooms amenity 
          schema:
            type: string
            example: "whiteboard"
        - name: id[]
          in: query
          description: id of the room 
          schema:
            type: string
            example: "578f6fa2df35c7fbdbaed8d9"
        - name: vacant_to
          in: query
          description: Reservation date in ISO format 
          schema:
            type: string
            format: date-time
        - name: vacant_from
          in: query
          description: Reservation date in ISO format
          schema:
            type: string
            format: date-time
        - name: owner_id
          in: query
          description: id of the owner of the room
          schema:
            type: string
            example: "578f6fa2df35c7fbdbaed8cf"
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rooms'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
               $ref:  '#/components/schemas/ErrorBadToken'
    post:
      summary: 'Creates a new available room'
      security:
        - bearerAuth: [] 
      tags:
        - rooms
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: 'Room 1'
                floor:
                  type: integer
                  format: int32
                  example: 2
                room_number:
                  type: integer
                  format: int32
                  example: 12
                info:
                  type: string
                  example: 'A very nice room'
                street:
                  type: string
                  example: 'Carrot st. 123'
                city: 
                  type: string
                  example: 'CarrotVille'
                state:
                  type: string
                  example: 'Vegetable land'
                zip:
                  type: string
                  example: '11223'
                owner_id:
                    type: string
                    example: '578f6fa2df35c7fbdbaed8fb'
                number_of_seats:
                  type: integer
                  format: int32
                  example: 6
                amenities:
                  type: array
                  items:
                    type: string
                  example:
                    ["wifi", "whiteboard"]
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/ErrorBadToken'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema: 
                $ref:  '#/components/schemas/ErrorBadBody' 
                      
  /rooms/{id}:
    get:
      summary: 'Returns details about a specific room'
      security:
        - bearerAuth: [] 
      tags:
        - rooms
      parameters:
        - name: id
          in: path
          description: id of the room document
          required: true
          schema: 
            type: string
            example: '578f6fa2df35c7fbdbaed8d9'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
               $ref:  '#/components/schemas/ErrorBadToken'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDoesntExist'
    delete:
      summary: 'Deletes the specified room'
      security:
        - bearerAuth: [] 
      tags:
        - rooms
      parameters:
        - name: id
          in: path
          description: id of the room document
          required: true
          schema: 
            type: string
            example: '578f6fa2df35c7fbdbaed8d9'
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
               $ref:  '#/components/schemas/ErrorBadToken'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDoesntExist'
                      
  /reservations:
    get:
        summary: 'Returns a list of reservation based on specified arguments'
        security:
        - bearerAuth: [] 
        tags:
          - reservations
        parameters:
          - name: room_id
            in: query
            description: id of the reserved room
            schema:
              type: string
              example: '578f6fa2df35c7fbdbaed8d9'
          - name: user_id
            in: query
            description: id of the user who made the reservation
            schema: 
              type: string
              example: '578f6fa2df35c7fbdbaed8cf'
          - name: reservation_lte
            in: query
            description: Reservation date in ISO format 
            schema:
              type: string
              format: date-time
          - name: reservation_gte
            in: query
            description: Reservation date in ISO format
            schema:
              type: string
              format: date-time
        responses:
          '200':
            description: Ok
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Reservations'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                 $ref:  '#/components/schemas/ErrorBadToken'
    post:
      summary: 'Creates a new reservation document'
      security:
        - bearerAuth: [] 
      tags:
        - reservations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                room_id:
                  type: string
                  example: '578f6fa2df35c7fbdbaed8cf'
                user_id:
                    type: string
                    example: '578f6fa2df35c7fbdbaed8fb'
                reserved_from:
                  type: string
                  format: date-time
                reserved_to:
                  type: string
                  format: date-time
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
               $ref:  '#/components/schemas/ErrorBadToken'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema: 
                $ref:  '#/components/schemas/ErrorBadBody' 
                
  /reservations/{id}:
    get:
      summary: 'Returns details about a specific reservation'
      security:
        - bearerAuth: [] 
      tags: 
        - reservations
      parameters:
        - name: id
          in: path
          description: id of the reservation document
          required: true
          schema: 
            type: string
            example: '578f6fa2df35c7fbdbaed8fb'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDoesntExist'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
               $ref:  '#/components/schemas/ErrorBadToken'
    delete:
      summary: 'Deletes the specified reservation'
      security:
        - bearerAuth: [] 
      tags:
        - reservations
      parameters:
        - name: id
          in: path
          description: id of the reservation document
          required: true
          schema: 
            type: string
            example: '578f6fa2df35c7fbdbaed8fb'
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDoesntExist'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
               $ref:  '#/components/schemas/ErrorBadToken'
                      
  /users/{id}:
    get:
      security:
        - bearerAuth: [] 
      summary: 'Returns details about a specific user'
      tags:
        - users
      parameters:
        - name: id
          in: path
          description: id of the user
          required: true
          schema:
            type: string
            example: '578f6fa2df35c7fbdbaed8cf'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDoesntExist'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
               $ref:  '#/components/schemas/ErrorBadToken'
    put:
      summary: 'Updates details of a specific user'
      security:
        - bearerAuth: [] 
      tags:
        - users
      parameters:
        - name: id
          in: path
          description: id of the user
          required: true
          schema:
            type: string
            example: '578f6fa2df35c7fbdbaed8cf'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                  example: 'First'
                last_name:
                    type: string
                    example: 'Last'
                email:
                  type: string
                  format: email
                  example: 'user@mail.com'
                username:
                  type: string
                  example: 'user'
                password:
                  type: string
                  example: 'password'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDoesntExist'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
               $ref:  '#/components/schemas/ErrorBadToken'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
               $ref:  '#/components/schemas/ErrorBadBody'
  /users/{id}/active-reservations:
    get:
      security:
        - bearerAuth: [] 
      summary: 'Returns list of active reservations for a specific user'
      tags:
        - users
      parameters:
        - name: id
          in: path
          description: id of the user
          required: true
          schema:
            type: string
            example: '578f6fa2df35c7fbdbaed8cf'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserActiveReservations'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDoesntExist'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
               $ref:  '#/components/schemas/ErrorBadToken'
  /users/{id}/active-listnings:
    get:
      security:
        - bearerAuth: [] 
      summary: 'Returns list of active listings for a specific user'
      tags:
        - users
      parameters:
        - name: id
          in: path
          description: id of the user
          required: true
          schema:
            type: string
            example: '578f6fa2df35c7fbdbaed8cf'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRooms'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDoesntExist'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
               $ref:  '#/components/schemas/ErrorBadToken'
  /users/{id}/history:
    get:
      security:
        - bearerAuth: [] 
      summary: 'Returns list of reservation history for a specific user'
      tags:
        - users
      parameters:
        - name: id
          in: path
          description: id of the user
          required: true
          schema:
            type: string
            example: '578f6fa2df35c7fbdbaed8cf'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserHistoryReservations'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDoesntExist'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
               $ref:  '#/components/schemas/ErrorBadToken'
  /users/{id}/notifications:
    get:
      security:
        - bearerAuth: [] 
      summary: 'Returns list of notifications for a specific user'
      tags:
        - users
      parameters:
        - name: id
          in: path
          description: id of the user
          required: true
          schema:
            type: string
            example: '578f6fa2df35c7fbdbaed8cf'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotifications'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDoesntExist'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
               $ref:  '#/components/schemas/ErrorBadToken'
  /users/register:
    post:
      summary: 'Creates a new user'
      tags:
        - users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                  example: 'First'
                last_name:
                    type: string
                    example: 'Last'
                email:
                  type: string
                  format: email
                  example: 'user@mail.com'
                username:
                  type: string
                  example: 'user'
                password:
                  type: string
                  example: 'password'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserShort'
        '409':
          description: Conflict
          content:
            application/json:
              schema: 
                  type: object
                  properties: 
                    error:
                      type: object
                      example: 
                        message: "Email already in use"
  /users/login:
    post:
      summary: 'Authenticates the user and generates new auth-token'
      tags:
        - users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: 'user@mail.com'
                username:
                  type: string
                  example: 'user'
                password:
                  type: string
                  example: 'password'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserShort'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema: 
                  type: object
                  properties: 
                    error:
                      type: object
                      example: 
                        message: "Wrong email"

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: '578f6fa2df35c7fbdbaed8cf'
        first_name:
          type: string
          example: 'First' 
        last_name:
          type: string
          example: 'Last'
        email:
          type: string
          format: email
          example: "user@mail.com"
        username:
          type: string
          example: 'user'
        profile_pic:
          type: string
          format: url
          example: "https://server.com/images/user_pfp.png"
          
    UserShort:
      type: object
      properties:
        id:
          type: string
          example: '578f6fa2df35c7fbdbaed8cf'
        username:
          type: string
          example: 'user'
        token:
          type: string
          example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ'
          
    UserActiveReservations:
      type: object
      properties:
        id:
          type: string
          example: '578f6fa2df35c7fbdbaed8cf'
        active_reservations:
          type: array
          items:
            type: object
            properties:
              id: 
                type: string
                example: '578f6fa2df35c7fbdbaed8fb'
              room_id:
                type: string
                example: '578f6fa2df35c7fbdbaed8d9'
              reserved_from:
                type: string
                format: date-time
              reserved_to:
                type: string
                format: date-time
    
    UserHistoryReservations:
      type: object
      properties:
        id:
          type: string
          example: '578f6fa2df35c7fbdbaed8cf'
        reservation_history:
          type: array
          items:
            type: object
            properties:
              id: 
                type: string
                example: '578f6fa2df35c7fbdbaed8fb'
              room_id:
                type: string
                example: '578f6fa2df35c7fbdbaed8d9'
              reserved_from:
                type: string
                format: date-time
              reserved_to:
                type: string
                format: date-time
                
    UserNotifications:
      type: object
      properties:
        id:
          type: string
          example: '578f6fa2df35c7fbdbaed8cf'
        notifications:
          type: array
          items:
            type: object
            properties:
              time: 
                type: string
                format: date-time
              type:
                type: string
                example: "missed_call"
              from_user:
                type: string
                example: '578f6fa2df35c7fbdbaed8d9'
              text:
                type: string
                example: 'Missed call from User1.'
                
    UserRooms:
      type: object
      properties:
        id:
          type: string
          example: '578f6fa2df35c7fbdbaed8cf'
        active_listings:
          type: array
          items: 
            type: object
            properties:
              id:
                type: string
                example: '578f6fa2df35c7fbdbaed8d9'
              name:
                type: string
                example: 'Big conference room'
              info:
                type: string
                example: "Very nice room, big windows."
              amenities:
                type: array
                items:
                  type: string
                example:
                  ["wifi", "whiteboard"]
              num_of_seats:
                type: integer
                format: int32
                example: 6
              thumbnail_url:
                type: string
                format: url
                example: "https://server.com/images/room1_thumbnail.jpeg"
          
    Rooms:
      type: array
      items: 
        type: object
        properties:
          id:
            type: string
            example: '578f6fa2df35c7fbdbaed8d9'
          name:
            type: string
            example: 'Big conference room'
          info:
            type: string
            example: "Very nice room, big windows."
          amenities:
            type: array
            items:
              type: string
            example:
              ["wifi", "whiteboard"]
          num_of_seats:
            type: integer
            format: int32
            example: 6
          thumbnail_url:
            type: string
            format: url
            example: "https://server.com/images/room1_thumbnail.jpeg"
            
    Room:
      type: object
      properties:
        id:
          type: string
          example: "578f6fa2df35c7fbdbaed8d9"
        name:
          type: string
          example: "Big conference room"
        floor:
          type: integer
          format: int32
          example: 3
        room_number:
          type: integer
          format: int32
          example: 12
        info:
          type: string
          example: "Very nice room, big windows."
        amenities:
          type: array
          items:
            type: string
          example:
            ["wifi", "whiteboard"]
        num_of_seats:
          type: integer
          format: int32
          example: 6
        thumbnail_url:
          type: string
          format: url
          example: "https://server.com/images/room1_thumbnail.jpeg"
        images_url:
          type: array
          items:
            type: string
            format: url
          example:
            ["https://server.com/images/room1_1.jpeg", "https://imageserver.com/images/room1_2.jpeg"]
        owner_id:
            type: string
            example: "578f6fa2df35c7fbdbaed8cf"
        reservations:
          type: array
          items:
            type: string
            example: "623dae9b35df97c5ea632c8e"
    
    Reservations:
      type: array
      items: 
        type: object
        properties:
          id: 
            type: string
            example: '578f6fa2df35c7fbdbaed8fb'
          room_id:
            type: string
            example: '578f6fa2df35c7fbdbaed8d9'
          user_id:
            type: string
            example: '578f6fa2df35c7fbdbaed8cf'
          reserved_from:
            type: string
            format: date-time
          reserved_to:
            type: string
            format: date-time
            
    Reservation:
      type: object
      properties:
        id: 
          type: string
          example: '578f6fa2df35c7fbdbaed8fb'
        room_id:
          type: string
          example: '578f6fa2df35c7fbdbaed8d9'
        user_id:
          type: string
          example: '578f6fa2df35c7fbdbaed8cf'
        reserved_from:
          type: string
          format: date-time
        reserved_to:
          type: string
          format: date-time
          
    ErrorDoesntExist:
      type: object
      properties: 
        error:
          type: object
          properties:
            message:
              type: string
              example: "Record doesnt exist"
              
    ErrorBadToken:
      type: object
      properties: 
        error:
          type: object
          properties:
            message:
              type: string
              example: "Invalid auth-token"
    
    ErrorBadBody:
      type: object
      properties: 
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                example: 'user_id'
              message:
                type: string
                example: 'wrong user_id'

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT